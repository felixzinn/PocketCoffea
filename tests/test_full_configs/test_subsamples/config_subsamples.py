# This config has been generated by the pocket_coffea CLI 0.9.4.
from pocket_coffea.lib.columns_manager import ColOut
from pocket_coffea.utils.configurator import Configurator
from pocket_coffea.lib.cut_definition import Cut
from pocket_coffea.lib.cut_functions import get_nObj_min, get_nObj_eq, get_HLTsel, get_nPVgood, goldenJson, eventFlags
from pocket_coffea.parameters.cuts import passthrough
from pocket_coffea.parameters.histograms import *
from pocket_coffea.lib.categorization import StandardSelection, CartesianSelection, MultiCut
from pocket_coffea.lib.columns_manager import ColOut
from pocket_coffea.lib.calibrators.common import default_calibrators_sequence 

import workflow
from workflow import BasicProcessor

# Register custom modules in cloudpickle to propagate them to dask workers
import custom_cut_functions

from custom_cut_functions import *
import os
localdir = os.path.dirname(os.path.abspath(__file__))

# Creating weights configuration
from pocket_coffea.lib.weights.common import common_weights

# Loading default parameters
from pocket_coffea.parameters import defaults
default_parameters = defaults.get_default_parameters()
defaults.register_configuration_dir("config_dir", localdir+"/params")
default_parameters.jets_calibration.jet_types.MC = {}
default_parameters.jets_calibration.variations = {}
default_parameters.jets_calibration.collection = {}

parameters = defaults.merge_parameters_from_files(default_parameters,
                                                    f"{localdir}/params/object_preselection.yaml",
                                                    f"{localdir}/params/triggers.yaml",
                                                   update=True)

# Disable pt sorting

parameters.jets_calibration.variations = {"AK4PFchs" : {"2018" : ["JES_Total"]}}
parameters.jets_calibration.collection["2018"] = {"AK4PFchs": "Jet"}
parameters.jets_calibration.sort_by_pt["2018"].AK4PFchs = False
parameters.jets_calibration.apply_jer_MC["2018"].AK4PFchs = False


#Creating custom weight
cfg = Configurator(
    parameters = parameters,
    datasets = {
        "jsons": ['datasets/datasets_cern.json'],
        "filter" : {
            "samples": ['TTTo2L2Nu', "DATA_SingleMuon"],
            "samples_exclude" : [],
            "year": ['2018']
        },
        "subsamples": {
            "TTTo2L2Nu": {
                "ele": [get_nObj_min(1, coll="ElectronGood"), get_nObj_eq(0, coll="MuonGood")],
                "mu":  [get_nObj_eq(0, coll="ElectronGood"), get_nObj_min(1, coll="MuonGood")],
            },
            "DATA_SingleMuon": {
                "clean": [get_HLTsel(primaryDatasets=["SingleEle"], invert=True)], # crosscleaning SingleELe trigger on SIngleMuon
            }
        }
    },

    workflow = BasicProcessor,
    workflow_options={"debug_calibrators": True},

    skim = [get_nPVgood(1), eventFlags, goldenJson,
            get_HLTsel(primaryDatasets=["SingleMuon", "SingleEle"])], 

    preselections = [passthrough],
    categories = {
        "baseline": [passthrough],
        "1btag": [get_nObj_min(1, coll="BJetGood")],
        "2btag": [get_nObj_min(2, coll="BJetGood")],
    },

    weights = {
        "common": {
            "inclusive": ["genWeight","lumi","XS","pileup",
                          "sf_ele_id","sf_ele_reco",
                          "sf_mu_id","sf_mu_iso"
                          ],
            "bycategory": {
                "1btag": ["sf_btag"],
                "2btag": ["sf_btag"],
            },
       },
        "bysample": {
        }
    },
    # Passing a list of WeightWrapper objects
    weights_classes = common_weights,
    calibrators = default_calibrators_sequence,

    variations = {
        "weights": {
            "common": {
                "inclusive": [ "pileup",
                               "sf_ele_id", "sf_ele_reco",
                               "sf_mu_id", "sf_mu_iso",
                               ],
                "bycategory" : {
                    "1btag": ["sf_btag"],
                    "2btag": ["sf_btag"],
                }
            },
            "bysample": {
            }
        
        },
        "shape": {
            "common": {
                "inclusive": [ "jet_calibration"],
            },
        }
    },

    variables = {
        **ele_hists(),
        **jet_hists(),
        **count_hist("JetGood"),
        **count_hist("BJetGood"),
    },

    columns = {
        "common": {
            "inclusive": [
                ColOut(collection="Jet", columns=["pt"]),
                ColOut(collection="PuppiMET", columns=["pt", "phi"]),
                ColOut(collection="Electron", columns=["pt", "eta"]),
            ]
        }
    },
)
